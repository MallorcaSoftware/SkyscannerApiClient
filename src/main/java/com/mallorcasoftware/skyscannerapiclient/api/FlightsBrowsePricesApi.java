/**
 * SkyscannerApiClient
 * Java api client for skyscanner API
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.mallorcasoftware.skyscannerapiclient.api;

import com.mallorcasoftware.skyscannerapiclient.ApiCallback;
import com.mallorcasoftware.skyscannerapiclient.ApiClient;
import com.mallorcasoftware.skyscannerapiclient.ApiException;
import com.mallorcasoftware.skyscannerapiclient.ApiResponse;
import com.mallorcasoftware.skyscannerapiclient.Configuration;
import com.mallorcasoftware.skyscannerapiclient.Pair;
import com.mallorcasoftware.skyscannerapiclient.ProgressRequestBody;
import com.mallorcasoftware.skyscannerapiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.mallorcasoftware.skyscannerapiclient.model.BrowseDatesResponseDto;
import com.mallorcasoftware.skyscannerapiclient.model.BrowseQuotesResponseDto;
import com.mallorcasoftware.skyscannerapiclient.model.BrowseRoutesResponseDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FlightsBrowsePricesApi {
    private ApiClient apiClient;

    public FlightsBrowsePricesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FlightsBrowsePricesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for browseDates */
    private com.squareup.okhttp.Call browseDatesCall(String country, String currency, String locale, String originPlace, String destinationPlace, String outboundPartialDate, String inboundPartialDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling browseDates(Async)");
        }
        
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling browseDates(Async)");
        }
        
        // verify the required parameter 'locale' is set
        if (locale == null) {
            throw new ApiException("Missing the required parameter 'locale' when calling browseDates(Async)");
        }
        
        // verify the required parameter 'originPlace' is set
        if (originPlace == null) {
            throw new ApiException("Missing the required parameter 'originPlace' when calling browseDates(Async)");
        }
        
        // verify the required parameter 'destinationPlace' is set
        if (destinationPlace == null) {
            throw new ApiException("Missing the required parameter 'destinationPlace' when calling browseDates(Async)");
        }
        
        // verify the required parameter 'outboundPartialDate' is set
        if (outboundPartialDate == null) {
            throw new ApiException("Missing the required parameter 'outboundPartialDate' when calling browseDates(Async)");
        }
        
        // verify the required parameter 'inboundPartialDate' is set
        if (inboundPartialDate == null) {
            throw new ApiException("Missing the required parameter 'inboundPartialDate' when calling browseDates(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/browsedates/v1.0/{country}/{currency}/{locale}/{originPlace}/{destinationPlace}/{outboundPartialDate}/{inboundPartialDate}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "country" + "\\}", apiClient.escapeString(country.toString()))
        .replaceAll("\\{" + "currency" + "\\}", apiClient.escapeString(currency.toString()))
        .replaceAll("\\{" + "locale" + "\\}", apiClient.escapeString(locale.toString()))
        .replaceAll("\\{" + "originPlace" + "\\}", apiClient.escapeString(originPlace.toString()))
        .replaceAll("\\{" + "destinationPlace" + "\\}", apiClient.escapeString(destinationPlace.toString()))
        .replaceAll("\\{" + "outboundPartialDate" + "\\}", apiClient.escapeString(outboundPartialDate.toString()))
        .replaceAll("\\{" + "inboundPartialDate" + "\\}", apiClient.escapeString(inboundPartialDate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Retrieve the cheapest dates for a given route from our cache. 
     * @param country The market country your user is in (required)
     * @param currency The currency you want the prices in (required)
     * @param locale The locale you want the results in (ISO locale) (required)
     * @param originPlace The origin place (see places) (required)
     * @param destinationPlace The destination place (see places) (required)
     * @param outboundPartialDate The outbound date. Format “yyyy-mm-dd”, “yyyy-mm” or “anytime”. (required)
     * @param inboundPartialDate The return date. Format “yyyy-mm-dd”, “yyyy-mm” or “anytime”. Use empty string for oneway trip. (required)
     * @return BrowseDatesResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrowseDatesResponseDto browseDates(String country, String currency, String locale, String originPlace, String destinationPlace, String outboundPartialDate, String inboundPartialDate) throws ApiException {
        ApiResponse<BrowseDatesResponseDto> resp = browseDatesWithHttpInfo(country, currency, locale, originPlace, destinationPlace, outboundPartialDate, inboundPartialDate);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the cheapest dates for a given route from our cache. 
     * @param country The market country your user is in (required)
     * @param currency The currency you want the prices in (required)
     * @param locale The locale you want the results in (ISO locale) (required)
     * @param originPlace The origin place (see places) (required)
     * @param destinationPlace The destination place (see places) (required)
     * @param outboundPartialDate The outbound date. Format “yyyy-mm-dd”, “yyyy-mm” or “anytime”. (required)
     * @param inboundPartialDate The return date. Format “yyyy-mm-dd”, “yyyy-mm” or “anytime”. Use empty string for oneway trip. (required)
     * @return ApiResponse&lt;BrowseDatesResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrowseDatesResponseDto> browseDatesWithHttpInfo(String country, String currency, String locale, String originPlace, String destinationPlace, String outboundPartialDate, String inboundPartialDate) throws ApiException {
        com.squareup.okhttp.Call call = browseDatesCall(country, currency, locale, originPlace, destinationPlace, outboundPartialDate, inboundPartialDate, null, null);
        Type localVarReturnType = new TypeToken<BrowseDatesResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the cheapest dates for a given route from our cache. 
     * @param country The market country your user is in (required)
     * @param currency The currency you want the prices in (required)
     * @param locale The locale you want the results in (ISO locale) (required)
     * @param originPlace The origin place (see places) (required)
     * @param destinationPlace The destination place (see places) (required)
     * @param outboundPartialDate The outbound date. Format “yyyy-mm-dd”, “yyyy-mm” or “anytime”. (required)
     * @param inboundPartialDate The return date. Format “yyyy-mm-dd”, “yyyy-mm” or “anytime”. Use empty string for oneway trip. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call browseDatesAsync(String country, String currency, String locale, String originPlace, String destinationPlace, String outboundPartialDate, String inboundPartialDate, final ApiCallback<BrowseDatesResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = browseDatesCall(country, currency, locale, originPlace, destinationPlace, outboundPartialDate, inboundPartialDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrowseDatesResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for browseQuotes */
    private com.squareup.okhttp.Call browseQuotesCall(String country, String currency, String locale, String originPlace, String destinationPlace, String outboundPartialDate, String inboundPartialDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling browseQuotes(Async)");
        }
        
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling browseQuotes(Async)");
        }
        
        // verify the required parameter 'locale' is set
        if (locale == null) {
            throw new ApiException("Missing the required parameter 'locale' when calling browseQuotes(Async)");
        }
        
        // verify the required parameter 'originPlace' is set
        if (originPlace == null) {
            throw new ApiException("Missing the required parameter 'originPlace' when calling browseQuotes(Async)");
        }
        
        // verify the required parameter 'destinationPlace' is set
        if (destinationPlace == null) {
            throw new ApiException("Missing the required parameter 'destinationPlace' when calling browseQuotes(Async)");
        }
        
        // verify the required parameter 'outboundPartialDate' is set
        if (outboundPartialDate == null) {
            throw new ApiException("Missing the required parameter 'outboundPartialDate' when calling browseQuotes(Async)");
        }
        
        // verify the required parameter 'inboundPartialDate' is set
        if (inboundPartialDate == null) {
            throw new ApiException("Missing the required parameter 'inboundPartialDate' when calling browseQuotes(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/browsequotes/v1.0/{country}/{currency}/{locale}/{originPlace}/{destinationPlace}/{outboundPartialDate}/{inboundPartialDate}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "country" + "\\}", apiClient.escapeString(country.toString()))
        .replaceAll("\\{" + "currency" + "\\}", apiClient.escapeString(currency.toString()))
        .replaceAll("\\{" + "locale" + "\\}", apiClient.escapeString(locale.toString()))
        .replaceAll("\\{" + "originPlace" + "\\}", apiClient.escapeString(originPlace.toString()))
        .replaceAll("\\{" + "destinationPlace" + "\\}", apiClient.escapeString(destinationPlace.toString()))
        .replaceAll("\\{" + "outboundPartialDate" + "\\}", apiClient.escapeString(outboundPartialDate.toString()))
        .replaceAll("\\{" + "inboundPartialDate" + "\\}", apiClient.escapeString(inboundPartialDate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Retrieve the cheapest quotes from our cache prices. 
     * @param country The market country your user is in (required)
     * @param currency The currency you want the prices in (required)
     * @param locale The locale you want the results in (ISO locale) (required)
     * @param originPlace The origin place (see places) (required)
     * @param destinationPlace The destination place (see places) (required)
     * @param outboundPartialDate The outbound date. Format “yyyy-mm-dd”, “yyyy-mm” or “anytime”. (required)
     * @param inboundPartialDate The return date. Format “yyyy-mm-dd”, “yyyy-mm” or “anytime”. Use empty string for oneway trip. (required)
     * @return BrowseQuotesResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrowseQuotesResponseDto browseQuotes(String country, String currency, String locale, String originPlace, String destinationPlace, String outboundPartialDate, String inboundPartialDate) throws ApiException {
        ApiResponse<BrowseQuotesResponseDto> resp = browseQuotesWithHttpInfo(country, currency, locale, originPlace, destinationPlace, outboundPartialDate, inboundPartialDate);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the cheapest quotes from our cache prices. 
     * @param country The market country your user is in (required)
     * @param currency The currency you want the prices in (required)
     * @param locale The locale you want the results in (ISO locale) (required)
     * @param originPlace The origin place (see places) (required)
     * @param destinationPlace The destination place (see places) (required)
     * @param outboundPartialDate The outbound date. Format “yyyy-mm-dd”, “yyyy-mm” or “anytime”. (required)
     * @param inboundPartialDate The return date. Format “yyyy-mm-dd”, “yyyy-mm” or “anytime”. Use empty string for oneway trip. (required)
     * @return ApiResponse&lt;BrowseQuotesResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrowseQuotesResponseDto> browseQuotesWithHttpInfo(String country, String currency, String locale, String originPlace, String destinationPlace, String outboundPartialDate, String inboundPartialDate) throws ApiException {
        com.squareup.okhttp.Call call = browseQuotesCall(country, currency, locale, originPlace, destinationPlace, outboundPartialDate, inboundPartialDate, null, null);
        Type localVarReturnType = new TypeToken<BrowseQuotesResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the cheapest quotes from our cache prices. 
     * @param country The market country your user is in (required)
     * @param currency The currency you want the prices in (required)
     * @param locale The locale you want the results in (ISO locale) (required)
     * @param originPlace The origin place (see places) (required)
     * @param destinationPlace The destination place (see places) (required)
     * @param outboundPartialDate The outbound date. Format “yyyy-mm-dd”, “yyyy-mm” or “anytime”. (required)
     * @param inboundPartialDate The return date. Format “yyyy-mm-dd”, “yyyy-mm” or “anytime”. Use empty string for oneway trip. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call browseQuotesAsync(String country, String currency, String locale, String originPlace, String destinationPlace, String outboundPartialDate, String inboundPartialDate, final ApiCallback<BrowseQuotesResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = browseQuotesCall(country, currency, locale, originPlace, destinationPlace, outboundPartialDate, inboundPartialDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrowseQuotesResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for browseRoutes */
    private com.squareup.okhttp.Call browseRoutesCall(String country, String currency, String locale, String originPlace, String destinationPlace, String outboundPartialDate, String inboundPartialDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling browseRoutes(Async)");
        }
        
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling browseRoutes(Async)");
        }
        
        // verify the required parameter 'locale' is set
        if (locale == null) {
            throw new ApiException("Missing the required parameter 'locale' when calling browseRoutes(Async)");
        }
        
        // verify the required parameter 'originPlace' is set
        if (originPlace == null) {
            throw new ApiException("Missing the required parameter 'originPlace' when calling browseRoutes(Async)");
        }
        
        // verify the required parameter 'destinationPlace' is set
        if (destinationPlace == null) {
            throw new ApiException("Missing the required parameter 'destinationPlace' when calling browseRoutes(Async)");
        }
        
        // verify the required parameter 'outboundPartialDate' is set
        if (outboundPartialDate == null) {
            throw new ApiException("Missing the required parameter 'outboundPartialDate' when calling browseRoutes(Async)");
        }
        
        // verify the required parameter 'inboundPartialDate' is set
        if (inboundPartialDate == null) {
            throw new ApiException("Missing the required parameter 'inboundPartialDate' when calling browseRoutes(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/browseroutes/v1.0/{country}/{currency}/{locale}/{originPlace}/{destinationPlace}/{outboundPartialDate}/{inboundPartialDate}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "country" + "\\}", apiClient.escapeString(country.toString()))
        .replaceAll("\\{" + "currency" + "\\}", apiClient.escapeString(currency.toString()))
        .replaceAll("\\{" + "locale" + "\\}", apiClient.escapeString(locale.toString()))
        .replaceAll("\\{" + "originPlace" + "\\}", apiClient.escapeString(originPlace.toString()))
        .replaceAll("\\{" + "destinationPlace" + "\\}", apiClient.escapeString(destinationPlace.toString()))
        .replaceAll("\\{" + "outboundPartialDate" + "\\}", apiClient.escapeString(outboundPartialDate.toString()))
        .replaceAll("\\{" + "inboundPartialDate" + "\\}", apiClient.escapeString(inboundPartialDate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Retrieve the cheapest routes from our cache prices. Similar to the Browse Quotes API but with the routes built for you from the individual quotes. 
     * @param country The market country your user is in (required)
     * @param currency The currency you want the prices in (required)
     * @param locale The locale you want the results in (ISO locale) (required)
     * @param originPlace The origin place (see places) (required)
     * @param destinationPlace The destination place (see places) (required)
     * @param outboundPartialDate The outbound date. Format “yyyy-mm-dd”, “yyyy-mm” or “anytime”. (required)
     * @param inboundPartialDate The return date. Format “yyyy-mm-dd”, “yyyy-mm” or “anytime”. Use empty string for oneway trip. (required)
     * @return BrowseRoutesResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BrowseRoutesResponseDto browseRoutes(String country, String currency, String locale, String originPlace, String destinationPlace, String outboundPartialDate, String inboundPartialDate) throws ApiException {
        ApiResponse<BrowseRoutesResponseDto> resp = browseRoutesWithHttpInfo(country, currency, locale, originPlace, destinationPlace, outboundPartialDate, inboundPartialDate);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the cheapest routes from our cache prices. Similar to the Browse Quotes API but with the routes built for you from the individual quotes. 
     * @param country The market country your user is in (required)
     * @param currency The currency you want the prices in (required)
     * @param locale The locale you want the results in (ISO locale) (required)
     * @param originPlace The origin place (see places) (required)
     * @param destinationPlace The destination place (see places) (required)
     * @param outboundPartialDate The outbound date. Format “yyyy-mm-dd”, “yyyy-mm” or “anytime”. (required)
     * @param inboundPartialDate The return date. Format “yyyy-mm-dd”, “yyyy-mm” or “anytime”. Use empty string for oneway trip. (required)
     * @return ApiResponse&lt;BrowseRoutesResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BrowseRoutesResponseDto> browseRoutesWithHttpInfo(String country, String currency, String locale, String originPlace, String destinationPlace, String outboundPartialDate, String inboundPartialDate) throws ApiException {
        com.squareup.okhttp.Call call = browseRoutesCall(country, currency, locale, originPlace, destinationPlace, outboundPartialDate, inboundPartialDate, null, null);
        Type localVarReturnType = new TypeToken<BrowseRoutesResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the cheapest routes from our cache prices. Similar to the Browse Quotes API but with the routes built for you from the individual quotes. 
     * @param country The market country your user is in (required)
     * @param currency The currency you want the prices in (required)
     * @param locale The locale you want the results in (ISO locale) (required)
     * @param originPlace The origin place (see places) (required)
     * @param destinationPlace The destination place (see places) (required)
     * @param outboundPartialDate The outbound date. Format “yyyy-mm-dd”, “yyyy-mm” or “anytime”. (required)
     * @param inboundPartialDate The return date. Format “yyyy-mm-dd”, “yyyy-mm” or “anytime”. Use empty string for oneway trip. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call browseRoutesAsync(String country, String currency, String locale, String originPlace, String destinationPlace, String outboundPartialDate, String inboundPartialDate, final ApiCallback<BrowseRoutesResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = browseRoutesCall(country, currency, locale, originPlace, destinationPlace, outboundPartialDate, inboundPartialDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BrowseRoutesResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
